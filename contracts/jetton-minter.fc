;; Jettons discoverable smart contract

;; storage scheme
;; storage#_
;;     total_supply: Grams
;;     admin_address: MsgAddress
;;     content: ^Cell
;;     jetton_wallet_code: ^Cell
;;     jetton_platform_code: ^Cell
;;     wallet_version: uint32
;;     = Storage;

#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/constants.fc";
#include "imports/jetton-utils.fc";
#include "imports/op-codes.fc";
#include "imports/discovery-params.fc";

#pragma version >=0.2.0;

(int, slice, cell, cell, cell, int) load_data() inline {
    slice ds = get_data().begin_parse();

    return (
        ds~load_coins(), ;; total_supply
        ds~load_msg_addr(), ;; admin_address
        ds~load_ref(), ;; content
        ds~load_ref(), ;; jetton_wallet_code
        ds~load_ref(), ;; jetton_platform_code
        ds~load_uint(32) ;; wallet_version
    );
}

() save_data(
    int total_supply,
    slice admin_address,
    cell content,
    cell jetton_wallet_code,
    cell jetton_platform_code,
    int wallet_version
) impure inline {
    set_data(
        begin_cell()
            .store_coins(total_supply)
            .store_slice(admin_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
            .store_ref(jetton_platform_code)
            .store_uint(wallet_version, 32)
            .end_cell()
    );
}

(slice) deploy_wallet(
    slice wallet_owner,
    slice sender_address,
    cell jetton_platform_code,
    cell jetton_wallet_code,
    int wallet_version,
    cell master_msg
) impure {
    cell state_init = calculate_jetton_wallet_state_init(
        wallet_owner,
        my_address(),
        jetton_platform_code
    );
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);

    var upgrade_msg = begin_cell()
        .store_uint(wallet_version, 32)
        .store_slice(sender_address)
        .store_ref(jetton_wallet_code)
        .end_cell();

    var upgrade_and_master_msg = begin_cell()
        .store_ref(upgrade_msg)
        .store_maybe_ref(master_msg)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(0)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(upgrade_and_master_msg)
        .end_cell();

    send_raw_message(msg, 64); ;; use remaining gas from inbound message, revert on errors

    return to_wallet_address;
}

() upgrade_wallet(
    slice sender_address,
    int query_id,
    cell wallet_code,
    slice remaining_gas_to,
    int wallet_version
) impure {
    cell msg_body = begin_cell()
        .store_uint(op::wallet_accept_upgrade(), 32)
        .store_uint(query_id, 64)
        .store_slice(remaining_gas_to)
        .store_ref(wallet_code)
        .store_uint(wallet_version, 32)
        .end_cell();

    cell msg = begin_cell()
        .store_uint(0x10, 6) ;; bounce - false
        .store_slice(sender_address)
        .store_coins(0)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; init - false, inplace - false
        .store_ref(msg_body)
        .end_cell();

    ;; use remaining balance of incoming msg
    send_raw_message(msg, 64);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of provide_wallet_address cost

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (
        int total_supply,
        slice admin_address,
        cell content,
        cell jetton_wallet_code,
        cell jetton_platform_code,
        int wallet_version
    ) = load_data();

    if (op == op::mint()) {
        throw_unless(73, equal_slices(sender_address, admin_address));

        slice to_address = in_msg_body~load_msg_addr();
        in_msg_body~load_coins();
        cell master_msg = in_msg_body~load_ref();
        slice master_msg_cs = master_msg.begin_parse();
        master_msg_cs~skip_bits(32 + 64); ;; op + query_id
        int jetton_amount = master_msg_cs~load_coins();

        deploy_wallet(
            to_address,
            sender_address,
            jetton_platform_code,
            jetton_wallet_code,
            wallet_version,
            master_msg
        );

        save_data(
            total_supply + jetton_amount,
            admin_address,
            content,
            jetton_wallet_code,
            jetton_platform_code,
            wallet_version
        );

        return ();
    }

    if (op == op::burn_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();

        throw_unless(
            74,
            equal_slices(
                calculate_user_jetton_wallet_address(
                    from_address,
                    my_address(),
                    jetton_platform_code
                ),
                sender_address
            )
        );

        save_data(
            total_supply - jetton_amount,
            admin_address,
            content,
            jetton_wallet_code,
            jetton_platform_code,
            wallet_version
        );

        slice response_address = in_msg_body~load_msg_addr();
        cell payload = in_msg_body~load_maybe_ref();

        if (response_address.preload_uint(2) != 0) {
            var msg = begin_cell()
                .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
                .store_slice(response_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

            if (payload.cell_null?()) {
                msg = msg
                    .store_uint(op::excesses(), 32)
                    .store_uint(query_id, 64);
            } else {
                slice remaining_gas_to = slice_bits(in_msg_body) >= 267 ? in_msg_body~load_msg_addr() : from_address;

                msg = msg
                    .store_uint(op::on_accept_tokens_burn(), 32)
                    .store_uint(jetton_amount, 128) ;; amount
                    .store_slice(from_address) ;; wallet owner
                    .store_ref(
                        begin_cell()
                            .store_slice(sender_address) ;; wallet
                            .store_ref(
                                begin_cell()
                                    .store_slice(remaining_gas_to)
                                    .store_ref(payload)
                                    .end_cell()
                            )
                            .end_cell()
                    );
            }

            send_raw_message(msg.end_cell(), 2 + 64);
        }

        return ();
    }

    if (op == op::provide_wallet_address()) {
        throw_unless(75, msg_value > fwd_fee + const::provide_address_gas_consumption());

        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell included_address = include_address?
            ? begin_cell().store_slice(owner_address).end_cell()
            : null();

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::take_wallet_address(), 32)
            .store_uint(query_id, 64);

        if (is_resolvable?(owner_address)) {
            msg = msg.store_slice(
                calculate_user_jetton_wallet_address(
                    owner_address,
                    my_address(),
                    jetton_platform_code
                )
            );
        } else {
            msg = msg.store_uint(0, 2); ;; addr_none
        }

        send_raw_message(msg.store_maybe_ref(included_address).end_cell(), 64);

        return ();
    }

    if (op == op::provide_info()) {
        throw_unless(75, msg_value > fwd_fee + const::provide_info_gas_consumption());

        (
            cell name,
            cell symbol,
            int decimals,
            int chain_id,
            int base_token
        ) = parse_jetton_info(content);

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::take_info(), 32)
            .store_uint(query_id, 64)
            .store_uint(decimals, 8)
            .store_uint(chain_id, 256)
            .store_uint(base_token, 256)
            .store_ref(name)
            .store_ref(symbol)
            .end_cell();

        send_raw_message(msg, 64);

        return ();
    }

    if (op == op::wallet_request_upgrade()) {
        slice wallet_owner = in_msg_body~load_msg_addr();
        slice expected_wallet = calculate_user_jetton_wallet_address(
            wallet_owner,
            my_address(),
            jetton_platform_code
        );

        throw_unless(74, equal_slices(expected_wallet, sender_address));

        slice remaining_gas_to = in_msg_body~load_msg_addr();
        int current_version = in_msg_body~load_uint(32);

        if (wallet_version > current_version) {
            upgrade_wallet(
                sender_address,
                query_id,
                jetton_wallet_code,
                remaining_gas_to,
                wallet_version
            );
        } else {
            var msg = begin_cell()
                .store_uint(0x10, 6) ;; bounce - false
                .store_slice(remaining_gas_to)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; init - false, inplace - true
                .store_uint(op::excesses(), 32)
                .store_uint(query_id, 64);

            ;; use remaining balance of incoming msg + ignore errors on action phase
            send_raw_message(msg.end_cell(), 64 + 2);
        }

        return ();
    }

    if (op == 3) { ;; change admin
        throw_unless(73, equal_slices(sender_address, admin_address));

        slice new_admin_address = in_msg_body~load_msg_addr();

        save_data(
            total_supply,
            new_admin_address,
            content,
            jetton_wallet_code,
            jetton_platform_code,
            wallet_version
        );

        return ();
    }

    if (op == 4) { ;; change content, delete this for immutable tokens
        throw_unless(73, equal_slices(sender_address, admin_address));

        save_data(
            total_supply,
            admin_address,
            in_msg_body~load_ref(),
            jetton_wallet_code,
            jetton_platform_code,
            wallet_version
        );

        return ();
    }

    if (op == op::upgrade_minter()) { ;; upgrade minter's code
        throw_unless(73, equal_slices(sender_address, admin_address));

        set_code(in_msg_body~load_ref());

        return ();
    }

    if (op == op::set_wallet_code()) { ;; set wallet code
        throw_unless(73, equal_slices(sender_address, admin_address));

        save_data(
            total_supply,
            admin_address,
            content,
            in_msg_body~load_ref(),
            jetton_platform_code,
            wallet_version + 1
        );

        return ();
    }

    if (op == op::deploy_wallet()) {
        int addr_val = in_msg_body.parse_addr().fourth().preload_uint(256);

        throw_if(76, addr_val == 0);

        deploy_wallet(
            in_msg_body~load_msg_addr(),
            sender_address,
            jetton_platform_code,
            jetton_wallet_code,
            wallet_version,
            null()
        );

        return ();
    }

    if (op == op::drain()) { ;; drain
        throw_unless(73, equal_slices(sender_address, admin_address));

        raw_reserve(const::jetton_master_min_reserve(), 0);

        var msg = begin_cell()
            .store_uint(0x10, 6) ;; bounce - false
            .store_slice(in_msg_body~load_msg_addr())
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1) ;; init - false, inplace - true
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64)
            .end_cell();

        ;; use all non-reserved contract's balance + ignore errors
        send_raw_message(msg, 128 + 2);

        return ();
    }

    throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (
        int total_supply,
        slice admin_address,
        cell content,
        cell jetton_wallet_code,
        cell jetton_platform_code,
        int wallet_version
    ) = load_data();

    (
        cell name,
        cell symbol,
        int decimals,
        int chain_id,
        int base_token
    ) = parse_jetton_info(content);

    slice symbol_slice = symbol.begin_parse();
    slice decimals_slice = encode_number_to_text(decimals, 10);

    (int addr_w, int addr_h) = my_address().parse_std_addr();
    slice my_workchain = encode_number_to_text(addr_w, 16);
    slice my_hash = add_zero_pad(
        encode_number_to_text(addr_h, 16),
        64
    );

    slice image_slice = begin_cell()
        .store_slice("https://ton-tokens-api.bf.works/image/")
        .store_slice(my_workchain)
        .store_slice(":")
        .store_slice(my_hash)
        .store_slice(".svg")
        .end_cell()
        .begin_parse();

    cell content_dict = new_dict();

    content_dict~udict_set_ref(256, "image"H, pack_metadata_value(image_slice));
    content_dict~udict_set_ref(256, "decimals"H, pack_metadata_value(decimals_slice));
    content_dict~udict_set_ref(256, "name"H, pack_metadata_value(name.begin_parse()));
    content_dict~udict_set_ref(256, "symbol"H, pack_metadata_value(symbol_slice));

    cell onchain_content = begin_cell()
        .store_uint(0, 8)
        .store_dict(content_dict)
        .end_cell();

    return (
        total_supply,
        -1,
        admin_address,
        onchain_content,
        jetton_wallet_code
    );
}

(cell, cell, int, int, int) get_jetton_meta() method_id {
    (
        int total_supply,
        slice admin_address,
        cell content,
        cell jetton_wallet_code,
        cell jetton_platform_code,
        int wallet_version
    ) = load_data();

    return parse_jetton_info(content);
}

(cell, int) get_jetton_platform_data() method_id {
    (
        int total_supply,
        slice admin_address,
        cell content,
        cell jetton_wallet_code,
        cell jetton_platform_code,
        int wallet_version
    ) = load_data();

    return (jetton_platform_code, wallet_version);
}

slice get_wallet_address(slice owner_address) method_id {
    (
        int total_supply,
        slice admin_address,
        cell content,
        cell jetton_wallet_code,
        cell jetton_platform_code,
        int version
    ) = load_data();

    return calculate_user_jetton_wallet_address(
        owner_address,
        my_address(),
        jetton_platform_code
    );
}
