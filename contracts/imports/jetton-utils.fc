#include "stdlib.fc";
#include "params.fc";

cell pack_jetton_wallet_data(
    int balance,
    slice owner_address,
    slice jetton_master_address,
    cell jetton_wallet_code,
    cell jetton_platform_code,
    int version
) inline {
    return begin_cell()
        .store_coins(balance)
        .store_slice(owner_address)
        .store_slice(jetton_master_address)
        .store_ref(jetton_wallet_code)
        .store_ref(jetton_platform_code)
        .store_uint(version, 32)
        .end_cell();
}

cell calculate_jetton_wallet_state_init(
    slice owner_address,
    slice jetton_master_address,
    cell jetton_platform_code
) inline {
    cell data = pack_jetton_wallet_data(
        0,
        owner_address,
        jetton_master_address,
        begin_cell().end_cell(),
        jetton_platform_code,
        0
    );

    return begin_cell()
        .store_uint(0, 2)
        .store_dict(jetton_platform_code)
        .store_dict(data)
        .store_uint(0, 1)
        .end_cell();
}

slice calculate_jetton_wallet_address(cell state_init) inline {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(workchain(), 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

slice calculate_user_jetton_wallet_address(
    slice owner_address,
    slice jetton_master_address,
    cell jetton_platform_code
) inline {
    return calculate_jetton_wallet_address(
        calculate_jetton_wallet_state_init(
            owner_address,
            jetton_master_address,
            jetton_platform_code
        )
    );
}

(cell, cell, int, int, int) parse_jetton_info(cell info) inline {
    slice is = info.begin_parse();

    return (
        is~load_ref(),
        is~load_ref(),
        is~load_uint(8),
        is~load_uint(256),
        is~load_uint(256)
    );
}

slice encode_number_to_text(int decimals, int radix) {
    builder str = begin_cell();
    int ctr = 0;
    tuple chars = empty_tuple();

    do {
        (decimals, int rem) = decimals /% radix;

        chars~tpush(rem >= 10 ? 87 + rem : 48 + rem);
        ctr += 1;
    } until (decimals == 0);

    repeat(ctr) {
        str = str.store_uint(chars.at(ctr - 1), 8);
        ctr -= 1;
    }

    return str.end_cell().begin_parse();
}

slice add_zero_pad(slice data, int byte_size) {
    int pad_zeros_count = byte_size - slice_bits(data) / 8;

    if (pad_zeros_count > 0) {
        builder str = begin_cell();

        repeat (pad_zeros_count) {
            str = str.store_uint(48, 8);
            pad_zeros_count -= 1;
        }

        return begin_cell()
            .store_builder(str)
            .store_slice(data)
            .end_cell()
            .begin_parse();
    }

    return data;
}

cell pack_metadata_value(slice a) inline {
    return begin_cell().store_uint(0, 8).store_slice(a).end_cell();
}
